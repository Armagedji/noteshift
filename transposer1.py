import subprocess
import os
from music21 import converter, stream, note, environment
from music21 import note, chord


from pdf2image import convert_from_path

environment.set('musicxmlPath', r'C:\Program Files\MuseScore 4\bin\MuseScore4.exe')
environment.set('musescoreDirectPNGPath', r'C:\Program Files\MuseScore 4\bin\MuseScore4.exe')

from music21 import stream, note, chord


def normalize_voices(score):
    # –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –ø–æ—Ç–æ–∫ –≥–æ–ª–æ—Å–∞
    voice = stream.Voice()

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–æ—Ç—ã –∏ –∞–∫–∫–æ—Ä–¥—ã –≤ —ç—Ç–æ—Ç –≥–æ–ª–æ—Å
    for el in score.recurse():
        if isinstance(el, note.Note) or isinstance(el, chord.Chord):
            voice.append(el)

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–æ—Ç—ã –∏ –∞–∫–∫–æ—Ä–¥—ã –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ score
    for el in list(score.recurse().getElementsByClass(note.Note)) + list(
            score.recurse().getElementsByClass(chord.Chord)):
        el.activeSite.remove(el)

    # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å –≤ score
    score.append(voice)


def save_as_pdf_and_png(score, filename_base):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∞—Ä—Ç–∏—Ç—É—Ä—É –≤ PDF –∏ PNG"""
    pdf_path = f"{filename_base}.pdf"
    png_path = f"{filename_base}.png"

    print(f"–°–æ—Ö—Ä–∞–Ω—è—é –∫–∞–∫ PDF: {pdf_path}")
    score.write('musicxml.pdf', fp=pdf_path)

    print(f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é PDF –≤ PNG: {png_path}")
    images = convert_from_path(pdf_path)
    if images:
        images[0].save(png_path, 'PNG')
        print(f"PNG —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {png_path}")
    else:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF –≤ PNG")


def load_from_midi(file_path):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ—Ç—ã –∏–∑ MIDI-—Ñ–∞–π–ª–∞"""
    return converter.parse(file_path)

def load_from_musicxml(file_path):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ—Ç—ã –∏–∑ MusicXML"""
    return converter.parse(file_path)

def load_from_image_via_audiveris(image_path, audiveris_exe_path, output_folder="output_xml"):
    """–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Audiveris.exe"""
    print("–ó–∞–ø—É—Å–∫ Audiveris (EXE)...")
    result = subprocess.run([
        audiveris_exe_path,
        "-batch", "-export",
        "-output", output_folder,
        image_path
    ], capture_output=True, text=True)

    print("STDOUT:", result.stdout)
    print("STDERR:", result.stderr)

    if result.returncode != 0:
        raise RuntimeError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Audiveris.exe")

    for root, _, files in os.walk(output_folder):
        for file in files:
            if file.endswith(".xml") or file.endswith(".mxl"):
                return converter.parse(os.path.join(root, file))
    raise FileNotFoundError("MusicXML –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

def transpose_score(score, semitones):
    """–¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä—É–µ—Ç –≤—Å—é –ø–∞—Ä—Ç–∏—Ç—É—Ä—É"""
    return score.transpose(semitones)

def show_score(score):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞—Ä—Ç–∏—Ç—É—Ä—É"""
    normalize_voices(score)
    score.show()

def main():
    print("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–æ—Ç:")
    print("1 - MIDI")
    print("2 - MusicXML")
    print("3 - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Audiveris")
    choice = input("–í–∞—à –≤—ã–±–æ—Ä (1/2/3): ")

    if choice == "1":
        path = input("–ü—É—Ç—å –∫ MIDI-—Ñ–∞–π–ª—É: ")
        score = load_from_midi(path)

    elif choice == "2":
        path = input("–ü—É—Ç—å –∫ MusicXML-—Ñ–∞–π–ª—É: ")
        score = load_from_musicxml(path)

    elif choice == "3":
        image_path = input("–ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —Å –Ω–æ—Ç–∞–º–∏ (png/jpg): ")
        audiveris_path = input("–ü—É—Ç—å –∫ audiveris.jar: ")
        score = load_from_image_via_audiveris(image_path, audiveris_path)

    else:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Ç–µ–º–ø –≤ –ø–∞—Ä—Ç–∏—Ç—É—Ä–µ
    print("\nüéº –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–º–ø–∞ –≤ –ø–∞—Ä—Ç–∏—Ç—É—Ä–µ:")
    for el in score.recurse().getElementsByClass('MetronomeMark'):
        print(el)

    semitones = int(input("–ù–∞ —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—É—Ç–æ–Ω–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä -6): "))
    transposed = transpose_score(score, semitones)

    print("–û—Ç–∫—Ä—ã–≤–∞—é —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–∞—Ä—Ç–∏—Ç—É—Ä—É...")
    show_score(transposed)

    save_option = input("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ PDF –∏ PNG? (y/n): ").lower()
    if save_option == "y":
        out_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è): ")
        save_as_pdf_and_png(transposed, out_name)




if __name__ == "__main__":
    main()